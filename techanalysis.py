# -*- coding: utf-8 -*-
"""Techanalysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sqzerQHvmX8i9smPR3uhPxM_y1jlQHfz
"""

#Importing the required Libraries
import plotly.graph_objects as go
import yfinance as yf
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import datetime as dt
plt.style.use('fivethirtyeight')

asset='AAPL' #We are selecting stock of Apple for analysis.
data=yf.download(asset,interval='1d',start='2016-10-01',end='2023-10-04')
data

# Store the data
df=data

# Candlestick chart of the data
figure=go.Figure(
    data=[
          go.Candlestick(
              x=df.index,
              low=df['Low'],
              high=df['High'],
              close=df['Close'],
              open=df['Open'],
              increasing_line_color='green',
              decreasing_line_color='red'
          )

    ]
)
figure.update_layout(
    title='Apple Price',
    yaxis_title='Apple Stock Price($)',
    xaxis_title='Date'
)
figure.show()

plt.figure(figsize=(14,5))
plt.plot(df['Close'],color='magenta',label='Closing price')
plt.xlabel('Date')
plt.ylabel('Close price USD($)')
plt.xticks(rotation=45)
plt.title("Closing price V/s Date")
plt.show()

# So The first indicator that we will take use of is Bollinger bands in this strategy.

#So,firstly calculate the simple moving average of period 30 day.
df['Midband']=df['Close'].rolling(window=30).mean()

#Calculate the upper band, lower band & standard deviation
#St dev:
df['st_d']=df['Close'].rolling(window=30).std()
#cal upper band
df['Ub']=df['Midband']+1.5*df['st_d']
#cal lower band
df['Lb']=df['Midband']-1.5*df['st_d']
df

#Visually showing that how thw bands will look like
plt.figure(figsize=(14,5))
plt.fill_between(df.index,df['Ub'],df['Lb'],color='lightsteelblue')
plt.plot(df['Midband'],color='crimson',lw=3,label='Midband')
plt.plot(df['Ub'],color='darkorchid',lw=3,label='UpperBand')
plt.plot(df['Lb'],color='lime',lw=3,label='lowerBnad')
plt.plot(df['Close'],color='magenta',label='Closing price',alpha=0.5)
plt.title("Visual representation of Bands")
plt.legend(loc='lower right')
plt.xlabel('Date')
plt.ylabel('Close price USD($)')
plt.show()

#This prgram uses On-Balance volume (OBV) to determine when to buy and sell stock
#Calculate the On balnce Volume(OBV)
def obv(data):
  OBV=[]
  OBV.append(0)

#Loop through the dataset (close price) from second row
  for i in range(1,len(data.Close)):
    if data['Close'][i]>data['Close'][i-1]:
      OBV.append(OBV[-1] + data['Volume'][i])  #Add the volume to the Previous row OBV if close price of current day is greater than previous day close price.
    elif data['Close'][i]<data['Close'][i-1]:
      OBV.append(OBV[-1] - data['Volume'][i])  #subtract the volume from the Previous row OBV if close price of current day is smaller than previous day close price.
    else:
      OBV.append(OBV[-1])

  data['OBV']=OBV
  data['OBV_EMA']=data['OBV'].ewm(span=20).mean();  #Find the 20 day Exponential moving average of OBV.
  return data

obv(df)

plt.figure(figsize=(12,6))
plt.plot(df['OBV'],label='OBV',color='lawngreen')
plt.plot(df['OBV_EMA'],label='OBV_EMA',color='midnightblue')

plt.legend(loc='lower left')
plt.show()

def RSI(data):

  data['price change']=data['Close'].pct_change()
  gain=data['price change'].apply(lambda x: x if x>0 else 0 )
  loss=data['price change'].apply(lambda x: abs(x) if x<0 else 0 )
  avg_gain=gain.ewm(span=16).mean()
  avg_loss=loss.ewm(span=16).mean()
  RS=avg_gain/avg_loss
  RSI=(100-(100/(1+RS)))
  data['RSI']=RSI
  data['Overbought']=90  #Upper threshold
  data['Oversold']=30

  return data

RSI(df) #Calling the function for df

plt.figure(figsize=(12,6))
plt.axhline(30,linestyle='--',color='blue')
plt.axhline(90,linestyle='--',color='yellow')
plt.plot(df['RSI'],label='RSI',color='mediumspringgreen')
plt.title('RSI')
plt.xlabel('Date')
plt.ylabel('RSI')
plt.xticks(rotation=45)
plt.show()

#Defining a function to indicate where to buy and where to sell
#Buy and sell the stock when two of the three indicators agree


def buy_sell(signal):
  portfolio=10000   #Take initial Portfolio value as 10000
  port_value=[]
  buy=[]
  sell=[]
  pos=[]
  profits=[]
  position=0;
  for i in range(len(signal)):
    if ((signal['Close'][i]>signal['Ub'][i] and signal['OBV'][i]<signal['OBV_EMA'][i]) or (signal['Close'][i]>signal['Ub'][i]  and signal['RSI'][i]>signal['Overbought'][i]) or (signal['OBV'][i]<signal['OBV_EMA'][i] and signal['RSI'][i]>signal['Overbought'][i] )) and position==1 :
      sell.append(signal['Open'][i+1])
      buy.append(np.nan)
      profits.append(n*(signal['Open'][i+1])-buy_at)   #We are selling it at the open price of the next day and we are calculating the profits.
      portfolio+=n*(signal['Open'][i+1])-buy_at
      port_value.append(portfolio)
      position=0
    elif ((signal['Close'][i]<signal['Lb'][i] and signal['OBV'][i]>signal['OBV_EMA'][i]) or (signal['Close'][i]<signal['Lb'][i] and signal['RSI'][i]<signal['Oversold'][i]) or (signal['OBV'][i]>signal['OBV_EMA'][i] and signal['RSI'][i]<signal['Oversold'][i] ) )and position==0:
      n=10000/signal['Open'][i+1]
      buy_at=n*signal['Open'][i+1]    #We are buying the asset at the open price of the next day.
      buy.append(signal['Open'][i+1])
      sell.append(np.nan)
      position=1
    else:
      buy.append(np.nan)
      sell.append(np.nan)
    pos.append(position)


  signal['Position']=pos
  return (buy,sell,profits,port_value)

df['buy']=buy_sell(df)[0]
df['sell']=buy_sell(df)[1]

plt.figure(figsize=(12,6))
plt.plot(df['Close'],label='Close price',color='aqua')

plt.plot(df['buy'],label='Buy_signal_price',color='green',marker='^',alpha=1)
plt.plot(df['sell'],label='Sell_signal_price',color='red',marker='v',alpha=1)


plt.xlabel('Date')
plt.ylabel('Closed price USD($)')
plt.legend(loc='upper left')
plt.xticks(rotation=45)
plt.show()

#Daily Returns

df['Daily_Returns']=df['Close'].pct_change(1)
df['Daily_Returns']

our_profit=buy_sell(df)[2]

print("The profits of our trade are:\n")
for i in range(0,len(our_profit)):
  print(our_profit[i])

print("\n")
print(f"The total profit that we gained or The Net Returns are:\n{sum(our_profit)} USD($)")

#Portfolio values over the trades
port_value=buy_sell(df)[3]
print("Portfolio Values")
port_value

#Final Portfolio's Value
final_port_value=port_value[-1]
print(f"Final PortFolio Value {final_port_value} USD($)")

#Dataframe for .csv file

port_value=buy_sell(df)[3]
new_df=pd.DataFrame()
buypts=[]
sellpts=[]
position=[]
date_buy=[]
date_sell=[]
for i in range(len(df['buy'])):
  if(pd.isna(df['buy'][i])!=True):
    buypts.append(df['buy'][i])
    date_buy.append(df.index[i])
  if(pd.isna(df['sell'][i])!=True):
    sellpts.append(df['sell'][i])
    date_sell.append(df.index[i])
    position.append("Closed")
sellpts.append(np.nan)
date_sell.append(np.nan)
port_value.append(final_port_value)
position.append("Open")

new_df['Buy_Price']=buypts
new_df['Buying Date']=date_buy
new_df['Sell_Price']=sellpts
new_df['Selling Date']=date_sell
new_df['PortFolio values']=port_value
new_df['Position']=position


new_df

file_name = "Buy_sell.csv"
new_df.to_csv(file_name,index=False)

wins=0
loss=0
for i in range (len(our_profit)):
  if our_profit[i]>0:
    wins+=1
  else:
    loss+=1
wins

#Win rate
win_rate=wins/(len(our_profit))
print(f"win_rate {win_rate}")

#Win/loss ratio
win_loss=wins/loss
print(f"Win-loss ratio {win_loss}")

#The profit and loss making trade and their maximum values:-
print("The Loss making trades are:")
mini=0
maxi=0
for i in range(len(our_profit)):
  if(our_profit[i]<0):
    print(our_profit[i])
    if(our_profit[i]<mini):
      mini=our_profit[i]

print('\n')
print("The maximum loss making trade is")
print(mini)

print('\n')
print("The Profit making trades are:")
for i in range(len(our_profit)):
  if(our_profit[i]>0):
      print(our_profit[i])
      if(our_profit[i]>maxi):
        maxi=our_profit[i]



print('\n')
print("The maximum Profit making trade is")
print(maxi)

#No. of executed trades:-
exe_trade=len(our_profit)

exe_trade

#Maximum Drawdown

# Initialize variables for maximum drawdown calculation
peak_value = -float('inf')
trough_value = float('inf')
maximum_drawdown = 0.0

for i in range (0, len(port_value)):
    if port_value[i] > peak_value:
        peak_value = port_value[i]
    else:
        drawdown = (port_value[i]-peak_value)
        if drawdown < maximum_drawdown:
            maximum_drawdown = drawdown
            trough_value = port_value[i]

print("Maximum Drawdown:", maximum_drawdown)

#Annualised Returns:
final_port_value=port_value[-1]
ann_re=(((final_port_value/10000)**(1/7))-1)*100

print(f"Annualised returns: {ann_re} %")

import statistics
 #Sharpe Ratio
risk_free_rate=4.88     # US 10-year bond rate..

sharpe_ratio=(statistics.mean(our_profit)-risk_free_rate)/(statistics.stdev(our_profit))
print(f"Sharpe Ratio: {sharpe_ratio}")

#Graph for portfolio returns & stock returns:
plt.figure(figsize=(12,6))
plt.subplot(1,2,1)

plt.plot(port_value,color='blue',lw=3)
plt.ylabel("PortFolio Value USD($)")

plt.subplot(1, 2, 2)
plt.plot(our_profit,color='blue',lw=3)
plt.ylabel("Stock Returns USD($)")

plt.show()

# We are gathering the data for index S&P500
asset='SPY' #We are selecting SPY index for analysis.
data2=yf.download(asset,interval='1d',start='2016-10-01',end='2023-10-04')
data2

df2=data2

# For SPY index


df2['Midband']=df2['Close'].rolling(window=30).mean()

df2['st_d']=df2['Close'].rolling(window=30).std()

df2['Ub']=df2['Midband']+1.5*df2['st_d']

df2['Lb']=df2['Midband']-1.5*df2['st_d']
df2

obv(df2)   #Calling OBV function for SPY index

RSI(df2)    #Calling RSI function for SPY index

df2['buy']=buy_sell(df2)[0]
df2['sell']=buy_sell(df2)[1]


df2

#For SPY index.
plt.figure(figsize=(12,6))
plt.plot(df2['Close'],label='Close price',color='aqua')
plt.plot(df2['buy'],label='Buy_signal_price',color='green',marker='^',alpha=1)
plt.plot(df2['sell'],label='Sell_signal_price',color='red',marker='v',alpha=1)


plt.xlabel('Date')
plt.ylabel('Closed price USD($)')
plt.legend(loc='upper left')
plt.xticks(rotation=45)
plt.show()

#Benchmark returns
bench_port_value=buy_sell(df2)[3]

print(f"The Net Benchmark Returns are:\n{bench_port_value[-1]-10000} USD($)")

# Sharpe ratio for benchmark.
bench_profit=buy_sell(df2)[2]
risk_free_rate=4.88        # US 10-year bond rate..

sharpe_ratio2=(statistics.mean(bench_profit)-risk_free_rate)/(statistics.stdev(bench_profit))

sharpe_ratio2